import { NextRequest, NextResponse } from 'next/server';

interface LangGraphRequest {
  command: {
    type: string;
    payload: any;
  };
  currentState: {
    rootQuestion: any;
    completedQuestionIds: string[];
    totalQuestions: number;
    answeredCount: number;
    isComplete: boolean;
    lastModified: string;
    version: number;
  };
  context?: {
    userId?: string;
    sessionId?: string;
    timestamp?: string;
  };
}

interface LangGraphResponse {
  success: boolean;
  commands: Array<{
    id: string;
    type: string;
    payload: any;
    timestamp: string;
    source: string;
  }>;
  metadata?: {
    reasoning?: string;
    processingTime?: number;
    model?: string;
  };
  errors?: string[];
}

export async function POST(request: NextRequest) {
  try {
    const body: LangGraphRequest = await request.json();
    
    console.log('API: Received request:', JSON.stringify(body, null, 2));

    // Call the actual LangGraph interview agent
    console.log('LLM: Calling interview agent for answer:', body.command.payload.answer);
    
    const langGraphResponse = await fetch('http://localhost:2024/threads', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        assistant_id: '43ad6a12-5d11-5b3e-b2b5-87afe4defe5c', // interview_agent ID
        input: {
          command: body.command,
          currentState: body.currentState,
          context: body.context
        }
      })
    });

    if (!langGraphResponse.ok) {
      throw new Error(`LangGraph API call failed: ${langGraphResponse.status} ${langGraphResponse.statusText}`);
    }

    const threadResult = await langGraphResponse.json();
    console.log('LangGraph thread created:', threadResult.thread_id);

    // Now invoke the thread to get the response
    const invokeResponse = await fetch(`http://localhost:2024/threads/${threadResult.thread_id}/runs`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        assistant_id: '43ad6a12-5d11-5b3e-b2b5-87afe4defe5c',
        input: {
          command: body.command,
          currentState: body.currentState,
          context: body.context
        }
      })
    });

    if (!invokeResponse.ok) {
      throw new Error(`LangGraph invoke failed: ${invokeResponse.status} ${invokeResponse.statusText}`);
    }

    const runResult = await invokeResponse.json();
    console.log('LangGraph run result:', JSON.stringify(runResult, null, 2));

    // Wait for the run to complete and get the final result
    const runId = runResult.run_id;
    let finalResult = runResult;
    
    // Poll for completion (max 30 seconds)
    const maxAttempts = 60; // 30 seconds with 500ms intervals
    let attempts = 0;
    
    while (finalResult.status === 'pending' && attempts < maxAttempts) {
      await new Promise(resolve => setTimeout(resolve, 500));
      
      const statusResponse = await fetch(`http://localhost:2024/threads/${threadResult.thread_id}/runs/${runId}`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        }
      });
      
      if (statusResponse.ok) {
        finalResult = await statusResponse.json();
        console.log(`Run status attempt ${attempts + 1}:`, finalResult.status);
      }
      
      attempts++;
    }
    
    console.log('Final LangGraph result:', JSON.stringify(finalResult, null, 2));

    // Get the final state values from the completed run
    const valuesResponse = await fetch(`http://localhost:2024/threads/${threadResult.thread_id}/state`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
      }
    });
    
    let graphOutput = {};
    
    if (valuesResponse.ok) {
      const stateData = await valuesResponse.json();
      console.log('Thread state data:', JSON.stringify(stateData, null, 2));
      
      // Extract the output from the state
      if (stateData.values && stateData.values.output) {
        graphOutput = stateData.values.output;
        console.log('Found output from thread state:', graphOutput);
      } else {
        console.log('No output found in thread state');
      }
    }

    // Extract the commands from the LangGraph response
    const output = graphOutput;
    
    const response: LangGraphResponse = {
      success: true,
      commands: output.commands || [],
      metadata: output.metadata || {
        reasoning: 'Generated by LangGraph interview agent',
        model: 'gpt-4o',
        processingTime: Date.now() - Date.now()
      }
    };

    console.log('API: Sending response:', JSON.stringify(response, null, 2));
    
    return NextResponse.json(response);

  } catch (error) {
    console.error('API route error:', error);
    
    return NextResponse.json({
      success: false,
      commands: [],
      metadata: {
        reasoning: 'Error occurred during processing',
        model: 'gpt-4o',
        processingTime: 0,
        error: error instanceof Error ? error.message : 'Unknown error'
      }
    }, { status: 500 });
  }
}