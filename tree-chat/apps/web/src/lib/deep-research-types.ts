/**
 * Deep Research Page Types
 * 深いリサーチ機能のための型定義
 */

// Research Status
export type ResearchStatus = 
  | 'pending'      // 未開始
  | 'planning'     // 計画策定中
  | 'researching'  // リサーチ実行中
  | 'analyzing'    // 分析中
  | 'reporting'    // レポート生成中
  | 'completed'    // 完了
  | 'error';       // エラー

// Sub Task Status
export type SubTaskStatus =
  | 'created'      // 作成済み
  | 'in_progress'  // 実行中
  | 'completed'    // 完了
  | 'failed';      // 失敗

// Research Stage
export interface ResearchStage {
  id: string;
  title: string;
  description: string;
  status: ResearchStatus;
  startTime?: string;
  endTime?: string;
  progress: number; // 0-100
}

// Research Question/Issue
export interface ResearchIssue {
  title: string;
  description: string;
  background?: string;
  objectives: string[];
  scope: string;
  constraints?: string;
  priority: 'high' | 'medium' | 'low';
  tags?: string[];
}

// Sub Task (generated by Manager)
export interface SubTask {
  id: string;
  title: string;
  description: string;
  priority: 'high' | 'medium' | 'low';
  status: SubTaskStatus;
  createdAt: string;
  startedAt?: string;
  completedAt?: string;
  parentTaskId?: string; // For nested sub tasks
  dependencies?: string[]; // other sub task IDs
  result?: SubTaskResult;
}

// Sub Task Result (from Researcher)
export interface SubTaskResult {
  conclusion: string;
  evidence: string[];
  sources: ResearchSource[];
  additionalTasks?: SubTask[]; // New tasks discovered during research
  confidence: number; // 0-1
  completedAt: string;
}

// Research Plan Step (deprecated - replaced by SubTask)
export interface ResearchStep {
  id: string;
  title: string;
  description: string;
  method: string; // web search, document analysis, etc.
  estimatedTime: string;
  dependencies?: string[]; // other step IDs
  status: ResearchStatus;
  result?: string;
}

// Research Result
export interface ResearchResult {
  stepId: string;
  title: string;
  content: string;
  sources: ResearchSource[];
  insights: string[];
  confidence: number; // 0-1
  timestamp: string;
}

// Research Source
export interface ResearchSource {
  type: 'web' | 'document' | 'database' | 'interview' | 'survey';
  title: string;
  url?: string;
  author?: string;
  publishDate?: string;
  relevance: number; // 0-1
  credibility: number; // 0-1
  excerpt: string;
}

// Final Report
export interface ResearchReport {
  title: string;
  executiveSummary: string;
  methodology: string;
  keyFindings: ReportFinding[];
  conclusions: string[];
  recommendations: ReportRecommendation[];
  limitations: string[];
  nextSteps?: string[];
  appendices?: ReportAppendix[];
  generatedAt: string;
}

// Report Finding
export interface ReportFinding {
  id: string;
  title: string;
  description: string;
  evidence: string[];
  sources: ResearchSource[];
  confidence: number;
  significance: 'high' | 'medium' | 'low';
}

// Report Recommendation  
export interface ReportRecommendation {
  id: string;
  title: string;
  description: string;
  rationale: string;
  priority: 'high' | 'medium' | 'low';
  timeline: string;
  resources?: string[];
  risks?: string[];
}

// Report Appendix
export interface ReportAppendix {
  id: string;
  title: string;
  content: string;
  type: 'data' | 'methodology' | 'sources' | 'other';
}

// Agent Input/Output Types
export interface ManagerInput {
  researchIssue: ResearchIssue;
  completedSubTasks?: SubTask[];
  pendingSubTasks?: SubTask[];
  isInitial?: boolean;
}

export interface ManagerOutput {
  decision: 'continue' | 'complete';
  subTasks?: SubTask[];
  reasoning: string;
  estimatedProgress: number; // 0-100
}

export interface ResearcherInput {
  subTask: SubTask;
  originalIssue: ResearchIssue;
}

export interface ResearcherOutput {
  subTaskId: string;
  result: SubTaskResult;
  executionLog?: string;
}

export interface ReporterInput {
  researchIssue: ResearchIssue;
  completedSubTasks: SubTask[];
  executionMetadata: {
    totalExecutionTime: number;
    startedAt: string;
    completedAt: string;
  };
}

export interface ReporterOutput {
  report: ResearchReport;
  summary: {
    totalSubTasks: number;
    successfulTasks: number;
    keyInsights: string[];
    confidenceLevel: number; // 0-1
  };
}

// Deep Research State (for FileSystem storage)
export interface DeepResearchState {
  issue: ResearchIssue | null;
  subTasks: SubTask[];
  activeSubTasks: string[]; // IDs of currently executing sub tasks
  completedSubTasks: string[]; // IDs of completed sub tasks
  managerIterations: ManagerOutput[]; // History of manager decisions
  report: ResearchReport | null;
  overallStatus: ResearchStatus;
  executionMetadata: {
    createdAt: string;
    updatedAt: string;
    startedAt?: string;
    completedAt?: string;
    version: string;
  };
}

// Component Props Types
export interface DeepResearchProps {
  sessionId: string;
  pageId: string;
}

export interface ResearchIssueFormProps {
  issue: ResearchIssue | null;
  onSubmit: (issue: ResearchIssue) => void;
  isSubmitting?: boolean;
}

export interface ResearchProgressProps {
  stages: ResearchStage[];
  currentStageId?: string;
}

export interface ResearchPlanProps {
  plan: ResearchStep[];
  onStartResearch: () => void;
  isExecuting?: boolean;
}

export interface ResearchResultsProps {
  results: ResearchResult[];
  onGenerateReport: () => void;
}

export interface ResearchReportProps {
  report: ResearchReport | null;
  onExport: (format: 'pdf' | 'markdown' | 'html') => void;
}