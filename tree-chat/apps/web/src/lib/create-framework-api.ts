/**
 * Framework API Configuration Generator
 * フレームワーク定義からAPI設定を自動生成
 */

import { createLangGraphClient } from './langgraph-client';

export interface FrameworkFieldDef {
  id: string;
  name: string;
}

export interface FrameworkDef {
  id: string;
  name: string;
  fields: FrameworkFieldDef[];
}

/**
 * フレームワーク定義からAPI設定を生成
 */
export function createFrameworkApi(framework: FrameworkDef) {
  // 型定義
  interface FrameworkInput {
    businessName: string;
    canvasData: Record<string, string>;
    context?: {
      timestamp?: string;
      requestType?: 'suggestion' | 'validation' | 'improvement';
    };
  }
  
  interface FrameworkSuggestion {
    sectionId: string;
    currentValue: string;
    suggestion: string;
    reasoning: string;
    priority: 'high' | 'medium' | 'low';
    type: 'empty' | 'insufficient' | 'improvement';
  }
  
  interface FrameworkResponse {
    success: boolean;
    suggestions: FrameworkSuggestion[];
    metadata?: {
      reasoning?: string;
      processingTime?: number;
      model?: string;
    };
    errors?: string[];
  }
  
  // API Client生成
  return createLangGraphClient<FrameworkInput, FrameworkResponse>({
    assistantId: `${framework.id.replace(/-/g, '_')}_agent`,
    
    transformInput: (requestData): FrameworkInput => {
      const inputData: Record<string, any> = {
        businessName: requestData.businessName
      };
      
      // 各フィールドをマップ
      framework.fields.forEach(field => {
        inputData[field.id] = requestData.canvasData?.[field.id] || '';
      });
      
      return inputData as FrameworkInput;
    },
    
    transformOutput: (langGraphOutput) => ({
      success: true,
      suggestions: langGraphOutput?.suggestions || [],
      metadata: langGraphOutput?.metadata || {
        reasoning: langGraphOutput?.reasoning || 'Generated by LangGraph agent',
        model: 'gpt-4o'
      }
    })
  });
}